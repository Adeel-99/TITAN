# Usage

## Installation

To install TITAN, it is required to use an Anaconda environment. The required libraries are listed in the requirements.txt file.
In order to install the required packages, the Anaconda environment can be created using

```console
$ conda create --name myenv --file requirements.txt
```

If the packages are not found, the user can append a conda channel to retrieve the packages, by running

```console
$ conda config --append channels conda-forge
```
To activate the Conda environment:

```console
$ conda activate myenv
```

After activation, the user needs to install other packages that were not possible (as GMSH) using the conda requirements. To do so,
the user can use the pip manager to install the packages listed in the pip_requirements.txt

```console
(.venv) $ pip install -r pip_requirements.txt
```

To install pymap3D, you can clone the following github page <https://github.com/geospace-code/pymap3d/> into the Executables foldar and install using

```console
(.venv) $ pip install -e pymap3d
```


### Optional

#### Mutation++
The mutation++ package is an optional method to compute the freestream conditions. It can be installed by following the instructions in <https://github.com/mutationpp/Mutationpp>
Once the mutation++ has been compiled, you can install by:

1. In the github link, go to the thirdpary folder and clone the Pybind repository into your thirdparty folder in mutationpp

2. In the Mutationpp root folder, run
```console
(.venv) $ python setup.py build
(.venv) $ python setup.py install
```

#### AMGio
AMGio is a library that is required to perform mesh adaptation when running high-fidelity simulations. To install the AMGio library, one must clone the following github page to the TITAN/Executables folder: <https://github.com/bmunguia/amgio>. THe user can the proceed to the installation using

```console
(.venv) $ pip install -e amgio/su2gmf/
```

### GRAM model
TITAN has the capability to use the NASA-GRAM <https://software.nasa.gov/software/MFS-33888-1> to retrieve the atmospheric properties of Earth, Neptune and Uranus. The user needs to request NASA to use the atmospheric model.


Once the GRAM tool is compiled, the user needs to link the binaries, and place them in the Executables folder

### Troubleshooting

If mpirun is not working, the user may require to reinstall openmpi and/or mpi4py using pip, by following the steps:

```console
(.venv) $ mamba uninstall mpi4py
(.venv) $ mamba uninstall openmpi
(.venv) $ pip install openmpi
(.venv) $ pip install mpi4py
```

## Setting up the Configuration file 

An explanation of the Configuration file can be found in the Config_temmplate.cfg file, in the root folder.

TITAN will read the configuration file using the config parser package. The file is divided into several subsections:

### Options
* **Num_iters** - Maximum number of iterations
* **Load_State** - Load the last simulation state
* **Fidelity** - Select the level of the aerothermodynamics in the simulation (Low/High/Hybrid)
* **Output_folder** - Folder where the simulation solution is stored

### Trajectory
* **Altitude** - Initial altitude [meters]
* **Velocity** - Initial Velocity [meters/second]
* **Flight_path_angle** - Initial FLight Path Angle [degree]

### Assembly
* **Path** - Path for the geometry files
* **Connectivity** - Linkage information for the specified components in the Objects section

### Objects
* **Primitive used in the Assembly** - name_Marker = (NAME, TYPE, MATERIAL)
* **Joints used in the Assembly** - name_Marker = (NAME, TYPE, MATERIAL, TRIGGER_TYPE, TRIGGER_VALUE)
	* NAME -> Name of the geometry file in stl format
	* TYPE -> Type of the object (Primitive/Joint)
	* MATERIAL -> Material of the object, needs to one specified in the material database
	* TRIGGER_TYPE  -> The criteria for the joint fragmentation (Altitude, time, iteration, Temperature)
	* TRIGGER_VALUE -> The value to trigger the fragmentation

## Running a simulation

TITAN is called in the conda environment using 

```console
(.venv) $ python TITAN.py -c config.cfg
```

The solution is stored in the specifed output folder. The structure in the output folder is as **SPECIFY HERE**

After obtaining the solution of the simulation, the data can be postprocessed by introducing a new flag to the instruction, refering to the Postprocess method that can be **WIND** or **ECEF**. The following command does not run a new simulation, but it postprocess the already obtained solutions in the **Output_folder** specified field.

```console
(.venv) $ python TITAN.py -c config.cfg -pp WIND
```

## Geometry modelling

The frame convention in the geometry modelling are such that the X axis is the longitudinal axis pointing ahead, Z axis is the vertical axis pointing downwards, and the Y axis is the lateral one, pointing in such a way that the frame is right-handed. 

In case of multiple components, if the components are in contact with each other, the respective meshes need to be identical in the interface (i.e. same node positioning and same facets).